# -*- coding: utf-8 -*-

# Form implementation generated from reading ui-submit file 'chathistory.ui-submit'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import json
from bson import json_util
import numpy as np
import cv2

class Ui_Formt2(object):
    def __init__(self, myname, sendname, message):
        self.myname = myname
        self.sendname = sendname
        self.message = message
        self.count_pic = 0

    def quick_sort(self):
        for i in range(1, len(self.message)):
            for j in range(i, 0, -1):
                if self.message[j]['date'] < self.message[j - 1]['date']:
                    self.message[j], self.message[j - 1] = self.message[j - 1], self.message[j]



    def show_data(self):
        for i in self.message:
            print(type(i), i)
            if i['send_user'] == self.myname:
                if i['message_type'] == 'str' or i['message_type'] == 'file':
                    self.textBrowser.append("<font color='red'>" + str(i['send_user']) + str(i['date']))
                    self.textBrowser.append(i['msg'])
                elif i['message_type'] == 'pic':
                    self.show_image_myself(i)

            else:
                if i['message_type'] == 'str':
                    self.textBrowser.append("<font color='blue'>" + str(i['send_user']) + str(i['date']))
                    self.textBrowser.append(i['msg'])
                elif i['message_type'] == 'pic':
                    self.show_image_other(i)



    def show_image_myself(self, i):
        i['msg'] = np.array(i['msg'])
        try:
            self.write_Pic(i['msg'], i['send_user']+str(self.count_pic)+".jpg")
        finally:
            pass
        self.textBrowser.append(
            "<font color='red' style='position: absolute;right:0px'>" + str(i['send_user']) + str(i['date']) + "</font>")
        self.textBrowser.append(r"<img src='./content/{}'/>".format(i['send_user']+str(self.count_pic)+".jpg"))
        self.count_pic += 1
    def show_image_other(self, i):
        i['msg'] = np.array(i['msg'])
        try:
            self.write_Pic(i['msg'], str(i['send_user'])+str(self.count_pic)+".jpg")
        finally:
            pass
        self.textBrowser.append(
            "<font color='blue' style='position: absolute;right:0px'>" + str(i['send_user']) + str(i['date']) + "</font>")
        self.textBrowser.append(r"<img src='./content/{}'/>".format(i['send_user']+str(self.count_pic)+".jpg"))
        self.count_pic += 1

    def write_Pic(self, res, name):
        cv2.imwrite('./content/{}'.format(name), res)



    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(400, 650)
        Form.setMinimumSize(QtCore.QSize(400, 650))
        Form.setMaximumSize(QtCore.QSize(400, 650))
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setGeometry(QtCore.QRect(0, 50, 400, 600))
        self.textBrowser.setMinimumSize(QtCore.QSize(400, 600))
        self.textBrowser.setMaximumSize(QtCore.QSize(400, 600))
        self.textBrowser.setObjectName("textBrowser")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(0, 0, 400, 50))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("./pics/6.png"))
        self.label.setObjectName("label")
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        #按时间排序
        self.quick_sort()
        #显示数据
        self.show_data()




    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))


if __name__ == "__main__":
	import sys
	QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)

	app =  QtWidgets.QApplication(sys.argv)
	MainWindow = QtWidgets.QMainWindow()
	ui = Ui_Formt2()
	ui.setupUi(MainWindow)
	MainWindow.show()
	sys.exit(app.exec_())